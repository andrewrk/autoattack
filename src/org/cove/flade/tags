!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AB	constraints/AngularConstraint.as	/^		var AB:Vector = new Vector(pb.x - pa.x, pb.y - pa.y);$/;"	v
AbstractTile	surfaces/AbstractTile.as	/^	public function AbstractTile(cx:Number, cy:Number) {$/;"	f
AngularConstraint	constraints/AngularConstraint.as	/^	public function AngularConstraint(p1:Particle, p2:Particle, p3:Particle) {$/;"	f
BC	constraints/AngularConstraint.as	/^		var BC:Vector = new Vector(pc.x - pb.x, pc.y - pb.y);$/;"	v
CircleParticle	primitives/CircleParticle.as	/^	public function CircleParticle(px:Number, py:Number, r:Number) {$/;"	f
CircleTile	surfaces/CircleTile.as	/^	public function CircleTile(cx:Number, cy:Number, r:Number) {		$/;"	f
DynamicsEngine	DynamicsEngine.as	/^	public function DynamicsEngine() {$/;"	f
Line	util/Line.as	/^	public function Line(p1:Vector, p2:Vector) {$/;"	f
LineSurface	surfaces/LineSurface.as	/^	public function LineSurface(p1x:Number, p1y:Number, p2x:Number, p2y:Number) {$/;"	f
Particle	primitives/Particle.as	/^	public function Particle(posX:Number, posY:Number) {$/;"	f
RectangleParticle	primitives/RectangleParticle.as	/^	public function RectangleParticle(px:Number, py:Number, w:Number, h:Number) {$/;"	f
RectangleTile	surfaces/RectangleTile.as	/^	public function RectangleTile(cx:Number, cy:Number, rw:Number, rh:Number) {$/;"	f
RimParticle	primitives/RimParticle.as	/^	public function RimParticle(r:Number, mt:Number) {$/;"	f
SpringBox	composites/SpringBox.as	/^	public function SpringBox ($/;"	f
SpringConstraint	constraints/SpringConstraint.as	/^	public function SpringConstraint(p1:Particle, p2:Particle) {$/;"	f
Vector	util/Vector.as	/^	public function Vector(px:Number, py:Number) {$/;"	f
Wheel	primitives/Wheel.as	/^	public function Wheel(x:Number, y:Number, r:Number) {$/;"	f
a	surfaces/LineSurface.as	/^		var a:Number = (p.x - p1.x) * run + (p.y - p1.y) * rise;$/;"	v
abRadius	constraints/AngularConstraint.as	/^		var abRadius:Number = pA.distance(pB);$/;"	v
absAxis	primitives/Particle.as	/^		var absAxis:Vector = new Vector(Math.abs(axis.x), Math.abs(axis.y));$/;"	v
absCX	surfaces/LineSurface.as	/^			var absCX:Number = Math.abs(circleNormal.x);$/;"	v
absF	surfaces/LineSurface.as	/^		var absF:Number = Math.abs(depthF);$/;"	v
absN	primitives/Particle.as	/^		var absN:Number = Math.abs(depthN);$/;"	v
absS	surfaces/LineSurface.as	/^		var absS:Number = Math.abs(depthS);$/;"	v
absX	primitives/Particle.as	/^		var absX:Number = Math.abs(depthX);$/;"	v
absX	surfaces/LineSurface.as	/^		var absX:Number = Math.abs(depthX);$/;"	v
absY	primitives/Particle.as	/^		var absY:Number = Math.abs(depthY);$/;"	v
absY	surfaces/LineSurface.as	/^		var absY:Number = Math.abs(depthY);$/;"	v
addConstraint	DynamicsEngine.as	/^	public function addConstraint(c:Constraint):Void {$/;"	f
addPrimitive	DynamicsEngine.as	/^	public function addPrimitive(p:Particle):Void {$/;"	f
addSurface	DynamicsEngine.as	/^	public function addSurface(s:Surface):Void {$/;"	f
adotb	util/Vector.as	/^		var adotb:Number = this.dot(b);$/;"	v
avgX	constraints/AngularConstraint.as	/^		var avgX:Number = (pA.x + pB.x + pC.x) \/ 3;$/;"	v
avgY	constraints/AngularConstraint.as	/^		var avgY:Number = (pA.y + pB.y + pC.y) \/ 3;$/;"	v
b	surfaces/AbstractTile.as	/^		var b:Number = center.y + rh\/2;$/;"	v
bcRadius	constraints/AngularConstraint.as	/^		var bcRadius:Number = pB.distance(pC);$/;"	v
bmax	primitives/Particle.as	/^	public var bmax:Number;$/;"	v
bmin	primitives/Particle.as	/^	public var bmin:Number;$/;"	v
calcFaceNormal	surfaces/LineSurface.as	/^	private function calcFaceNormal():Void {$/;"	f
calcSideNormal	surfaces/LineSurface.as	/^	private function calcSideNormal():Void {$/;"	f
calcTheta	constraints/AngularConstraint.as	/^	private function calcTheta(pa:Vector, pb:Vector, pc:Vector):Number {$/;"	f
center	constraints/AngularConstraint.as	/^		var center:Vector = getCentroid();$/;"	v
center	surfaces/AbstractTile.as	/^	private var center:Vector;$/;"	v
checkCollision	primitives/CircleParticle.as	/^	public function checkCollision(surface:Surface, sysObj:DynamicsEngine):Void {$/;"	f
checkCollision	primitives/Particle.as	/^	public function checkCollision(surface:Surface, sysObj:DynamicsEngine):Void {$/;"	f
checkCollision	primitives/RectangleParticle.as	/^	public function checkCollision(surface:Surface, sysObj:DynamicsEngine):Void {$/;"	f
checkCollisions	DynamicsEngine.as	/^	private function checkCollisions():Void {$/;"	f
circleNormal	surfaces/LineSurface.as	/^		var circleNormal:Vector = p.closestPoint.minusNew(p.curr);$/;"	v
clen	primitives/RimParticle.as	/^		var clen:Number = Math.sqrt(curr.x * curr.x + curr.y * curr.y);$/;"	v
closestPoint	primitives/CircleParticle.as	/^	public var closestPoint:Vector;$/;"	v
coeffDamp	DynamicsEngine.as	/^	public var coeffDamp:Number;	$/;"	v
coeffFric	DynamicsEngine.as	/^	public var coeffFric:Number;$/;"	v
coeffRest	DynamicsEngine.as	/^	public var coeffRest:Number;$/;"	v
coeffSlip	primitives/Wheel.as	/^	private var coeffSlip:Number;				$/;"	v
collNormal	surfaces/LineSurface.as	/^	private var collNormal:Vector;$/;"	v
collisionDepth	surfaces/LineSurface.as	/^	private var collisionDepth:Number;$/;"	v
color	constraints/SpringConstraint.as	/^	private var color:Number;$/;"	v
constraints	DynamicsEngine.as	/^	public var constraints:Array;$/;"	v
contactPoint	surfaces/LineSurface.as	/^		var contactPoint:Vector = p.curr.plusNew(circleNormal.mult(p.radius));$/;"	v
contactRadius	primitives/CircleParticle.as	/^	public var contactRadius:Number;$/;"	v
copy	util/Vector.as	/^	public function copy(v:Vector):Void {$/;"	f
createBoundingRect	surfaces/AbstractTile.as	/^	public function createBoundingRect(rw:Number, rh:Number) { $/;"	f
createRectangle	surfaces/LineSurface.as	/^	private function createRectangle():Void {$/;"	f
cross	util/Vector.as	/^	public function cross(v:Vector):Number {$/;"	f
crossProd	constraints/AngularConstraint.as	/^		var crossProd:Number = AB.cross(BC);$/;"	v
curr	primitives/Particle.as	/^	public var curr:Vector;$/;"	v
curr	primitives/RimParticle.as	/^	public var curr:Vector;$/;"	v
delta	constraints/SpringConstraint.as	/^		var delta:Vector = p1.curr.minusNew(p2.curr);$/;"	v
deltaLength	constraints/SpringConstraint.as	/^		var deltaLength:Number = p1.curr.distance(p2.curr);$/;"	v
depth	constraints/SpringConstraint.as	/^		var depth:Number = _root.getNextHighestDepth();$/;"	v
depth	primitives/Particle.as	/^		var depth:Number = _root.getNextHighestDepth();$/;"	v
depth	surfaces/AbstractTile.as	/^		var depth:Number = _root.getNextHighestDepth();$/;"	v
depth1	surfaces/AbstractTile.as	/^		var depth1:Number = tileMax - boxMin;$/;"	v
depth2	surfaces/AbstractTile.as	/^		var depth2:Number = tileMin - boxMax;$/;"	v
depthF	surfaces/LineSurface.as	/^		var depthF:Number = testIntervals(p.bmin, p.bmax, minF, maxF);$/;"	v
depthS	surfaces/LineSurface.as	/^		var depthS:Number = testIntervals(p.bmin, p.bmax, minS, maxS);$/;"	v
depthX	surfaces/CircleTile.as	/^		var depthX:Number = testIntervals(p.bmin, p.bmax, minX, maxX);$/;"	v
depthX	surfaces/LineSurface.as	/^		var depthX:Number = testIntervals(p.bmin, p.bmax, minX, maxX);$/;"	v
depthX	surfaces/RectangleTile.as	/^		var depthX:Number = testIntervals(p.bmin, p.bmax, minX, maxX);$/;"	v
depthY	surfaces/CircleTile.as	/^		var depthY:Number = testIntervals(p.bmin, p.bmax, minY, maxY);$/;"	v
depthY	surfaces/LineSurface.as	/^		var depthY:Number = testIntervals(p.bmin, p.bmax, minY, maxY);$/;"	v
depthY	surfaces/RectangleTile.as	/^		var depthY:Number = testIntervals(p.bmin, p.bmax, minY, maxY);$/;"	v
dfx	constraints/AngularConstraint.as	/^		var dfx:Number = newCenter.x - center.x;$/;"	v
dfy	constraints/AngularConstraint.as	/^		var dfy:Number = newCenter.y - center.y;$/;"	v
diff	constraints/SpringConstraint.as	/^		var diff:Number = (deltaLength - restLength) \/ deltaLength;$/;"	v
diff	primitives/RimParticle.as	/^		var diff:Number = (clen - wr) \/ clen;$/;"	v
distance	util/Vector.as	/^	public function distance(v:Vector):Number {$/;"	f
dmc	constraints/SpringConstraint.as	/^	private var dmc:MovieClip;$/;"	v
dmc	primitives/Particle.as	/^	private var dmc:MovieClip;$/;"	v
dmc	surfaces/AbstractTile.as	/^	private var dmc:MovieClip;$/;"	v
dmd	constraints/SpringConstraint.as	/^		var dmd:Vector = delta.mult(diff * stiffness);$/;"	v
dot	util/Vector.as	/^	public function dot(v:Vector):Number {$/;"	f
dotProd	constraints/AngularConstraint.as	/^		var dotProd:Number = AB.dot(BC);$/;"	v
dp	primitives/Wheel.as	/^		var dp:Number = -n.y * vx + n.x * vy;$/;"	v
drawClipName	constraints/SpringConstraint.as	/^		var drawClipName:String = "_" + depth;$/;"	v
drawClipName	primitives/Particle.as	/^		var drawClipName:String = "_" + depth;$/;"	v
drawClipName	surfaces/AbstractTile.as	/^		var drawClipName:String = "_" + depth;$/;"	v
dx	primitives/RimParticle.as	/^		var dx:Number = -curr.y;$/;"	v
dx	surfaces/CircleTile.as	/^			var dx:Number = p.vertex.x - center.x;$/;"	v
dx	surfaces/CircleTile.as	/^		var dx:Number = center.x - p.curr.x;$/;"	v
dx	surfaces/LineSurface.as	/^			var dx:Number = contactPoint.x - p.closestPoint.x;$/;"	v
dx	surfaces/LineSurface.as	/^		var dx:Number = p2.x - p1.x;$/;"	v
dx	surfaces/LineSurface.as	/^		var dx:Number = p3.x - p2.x;$/;"	v
dx	surfaces/RectangleTile.as	/^			var dx:Number = p.curr.x - vx;$/;"	v
dx	util/Vector.as	/^		var dx:Number = x - v.x;$/;"	v
dy	primitives/RimParticle.as	/^		var dy:Number =  curr.x;$/;"	v
dy	surfaces/CircleTile.as	/^			var dy:Number = p.vertex.y - center.y;$/;"	v
dy	surfaces/CircleTile.as	/^		var dy:Number = center.y - p.curr.y;$/;"	v
dy	surfaces/LineSurface.as	/^			var dy:Number = contactPoint.y - p.closestPoint.y;$/;"	v
dy	surfaces/LineSurface.as	/^		var dy:Number = p2.y - p1.y;$/;"	v
dy	surfaces/LineSurface.as	/^		var dy:Number = p3.y - p2.y;$/;"	v
dy	surfaces/RectangleTile.as	/^			var dy:Number = p.curr.y - vy;$/;"	v
dy	util/Vector.as	/^		var dy:Number = y - v.y;$/;"	v
extents	primitives/Particle.as	/^	private var extents:Vector;$/;"	v
faceNormal	surfaces/LineSurface.as	/^	private var faceNormal:Vector;$/;"	v
findClosestPoint	surfaces/LineSurface.as	/^	private function findClosestPoint(toPoint:Vector, returnVect:Vector):Void {$/;"	f
findU	surfaces/LineSurface.as	/^	private function findU(p:Vector):Number {$/;"	f
getActiveState	surfaces/AbstractTile.as	/^	public function getActiveState():Boolean {$/;"	f
getActiveState	surfaces/Surface.as	/^	public function getActiveState():Boolean$/;"	f
getAxisProjection	primitives/Particle.as	/^	public function getAxisProjection(axis:Vector):Void {$/;"	f
getCardXProjection	primitives/Particle.as	/^	public function getCardXProjection():Void {$/;"	f
getCardXProjection	surfaces/AbstractTile.as	/^	public function getCardXProjection():Void {$/;"	f
getCardYProjection	primitives/Particle.as	/^	public function getCardYProjection():Void {$/;"	f
getCardYProjection	surfaces/AbstractTile.as	/^	public function getCardYProjection():Void {$/;"	f
getCentroid	constraints/AngularConstraint.as	/^	private function getCentroid():Vector {$/;"	f
gravity	DynamicsEngine.as	/^	public var gravity:Vector;$/;"	v
h2	graphics/Graphics.as	/^		var h2:Number = h\/2;$/;"	v
halfTheta	constraints/AngularConstraint.as	/^		var halfTheta:Number = (targetTheta - thetaABC) \/ 2;$/;"	v
height	primitives/RectangleParticle.as	/^	public var height:Number;$/;"	v
inequality	surfaces/LineSurface.as	/^	private function inequality(toPoint:Vector):Boolean {	$/;"	f
init	primitives/Particle.as	/^	private var init:Vector;$/;"	v
initializeContainer	constraints/SpringConstraint.as	/^	public function initializeContainer():Void {$/;"	f
initializeContainer	primitives/Particle.as	/^	public function initializeContainer():Void {$/;"	f
initializeContainer	surfaces/AbstractTile.as	/^	public function initializeContainer() {$/;"	f
invB	surfaces/LineSurface.as	/^	private var invB:Number;$/;"	v
isActivated	surfaces/AbstractTile.as	/^	private var isActivated:Boolean;$/;"	v
isCircleColliding	surfaces/CircleTile.as	/^	private function isCircleColliding(p:CircleParticle):Boolean {$/;"	f
isCircleColliding	surfaces/LineSurface.as	/^	private function isCircleColliding(p:CircleParticle):Boolean {$/;"	f
isCircleColliding	surfaces/RectangleTile.as	/^	private function isCircleColliding(p:CircleParticle):Boolean {$/;"	f
isInVertexX	surfaces/CircleTile.as	/^		var isInVertexX:Boolean = Math.abs(depthX) < radius;$/;"	v
isInVertexX	surfaces/RectangleTile.as	/^		var isInVertexX:Boolean = Math.abs(depthX) < p.radius;$/;"	v
isInVertexY	surfaces/CircleTile.as	/^		var isInVertexY:Boolean = Math.abs(depthY) < radius;$/;"	v
isInVertexY	surfaces/RectangleTile.as	/^		var isInVertexY:Boolean = Math.abs(depthY) < p.radius;$/;"	v
isRectangleColliding	surfaces/CircleTile.as	/^	private function isRectangleColliding(p:RectangleParticle):Boolean {$/;"	f
isRectangleColliding	surfaces/LineSurface.as	/^	private function isRectangleColliding(p:RectangleParticle):Boolean {$/;"	f
isRectangleColliding	surfaces/RectangleTile.as	/^	private function isRectangleColliding(p:RectangleParticle):Boolean {$/;"	f
isUnder	surfaces/LineSurface.as	/^		var isUnder:Boolean = inequality(toPoint);$/;"	v
isVisible	constraints/SpringConstraint.as	/^	private var isVisible:Boolean;$/;"	v
isVisible	primitives/Particle.as	/^	private var isVisible:Boolean;$/;"	v
isVisible	surfaces/AbstractTile.as	/^	private var isVisible:Boolean;$/;"	v
l	surfaces/AbstractTile.as	/^		var l:Number = center.x - rw\/2;$/;"	v
len	primitives/RimParticle.as	/^		var len:Number = Math.sqrt(dx * dx + dy * dy);$/;"	v
len	primitives/Wheel.as	/^		var len:Number = Math.sqrt(rx * rx + ry * ry);$/;"	v
len	surfaces/CircleTile.as	/^		var len:Number = Math.sqrt(dx * dx + dy * dy);$/;"	v
len	util/Vector.as	/^		var len:Number = (b.x * b.x + b.y * b.y);$/;"	v
line	surfaces/LineSurface.as	/^		var line:Number = (slope * (toPoint.x - p1.x) + (p1.y - toPoint.y)) * sign;$/;"	v
lineA	constraints/AngularConstraint.as	/^	private var lineA:Line;$/;"	v
lineB	constraints/AngularConstraint.as	/^	private var lineB:Line;$/;"	v
lineC	constraints/AngularConstraint.as	/^	private var lineC:Line;$/;"	v
mag	surfaces/CircleTile.as	/^			var mag:Number = Math.sqrt(dx * dx + dy * dy);$/;"	v
mag	surfaces/RectangleTile.as	/^    		var mag:Number = Math.sqrt(dx * dx + dy * dy);$/;"	v
mag	util/Vector.as	/^	   var mag:Number = Math.sqrt(x * x + y * y);$/;"	v
magnitude	util/Vector.as	/^	public function magnitude():Number {$/;"	f
maxF	surfaces/LineSurface.as	/^	private var maxF:Number;$/;"	v
maxS	surfaces/LineSurface.as	/^	private var maxS:Number;$/;"	v
maxTorque	primitives/RimParticle.as	/^	private var maxTorque:Number;	$/;"	v
maxX	surfaces/AbstractTile.as	/^	private var maxX:Number;$/;"	v
maxY	surfaces/AbstractTile.as	/^	private var maxY:Number;$/;"	v
minF	surfaces/LineSurface.as	/^	private var minF:Number;$/;"	v
minS	surfaces/LineSurface.as	/^	private var minS:Number;$/;"	v
minX	surfaces/AbstractTile.as	/^	private var minX:Number;$/;"	v
minY	surfaces/AbstractTile.as	/^	private var minY:Number;$/;"	v
minus	util/Vector.as	/^	public function minus(v:Vector):Vector {$/;"	f
minusNew	util/Vector.as	/^	public function minusNew(v:Vector):Vector {$/;"	f
msp4r	graphics/Graphics.as	/^		var msp4r:Number = Math.sin(Math.PI\/4) * r;$/;"	v
mtd	primitives/Particle.as	/^	public var mtd:Vector;$/;"	v
mtp8r	graphics/Graphics.as	/^		var mtp8r:Number = Math.tan(Math.PI\/8) * r;$/;"	v
mult	util/Vector.as	/^	public function mult(s:Number):Vector {$/;"	f
multNew	util/Vector.as	/^	public function multNew(s:Number):Vector {$/;"	f
newCenter	constraints/AngularConstraint.as	/^		var newCenter:Vector = getCentroid();$/;"	v
newVel	primitives/Particle.as	/^		var newVel:Vector = vel.minusNew(totalMomentum);$/;"	v
normMomentum	primitives/Particle.as	/^		var normMomentum:Vector = normal.multNew(sDotV * sysObj.coeffRest);$/;"	v
normal	surfaces/AbstractTile.as	/^	private var normal:Vector;$/;"	v
normalize	util/Vector.as	/^	public function normalize():Vector {$/;"	f
onContact	surfaces/AbstractTile.as	/^	public function onContact() {$/;"	f
org	DynamicsEngine.as	/^class org.cove.flade.DynamicsEngine {$/;"	c
org	composites/SpringBox.as	/^class org.cove.flade.composites.SpringBox {$/;"	c
org	constraints/AngularConstraint.as	/^class org.cove.flade.constraints.AngularConstraint implements Constraint {$/;"	c
org	constraints/SpringConstraint.as	/^class org.cove.flade.constraints.SpringConstraint implements Constraint{$/;"	c
org	graphics/Graphics.as	/^class org.cove.flade.graphics.Graphics {$/;"	c
org	primitives/CircleParticle.as	/^class org.cove.flade.primitives.CircleParticle extends Particle {$/;"	c
org	primitives/Particle.as	/^class org.cove.flade.primitives.Particle {$/;"	c
org	primitives/RectangleParticle.as	/^class org.cove.flade.primitives.RectangleParticle extends Particle {$/;"	c
org	primitives/RimParticle.as	/^class org.cove.flade.primitives.RimParticle {$/;"	c
org	primitives/Wheel.as	/^class org.cove.flade.primitives.Wheel extends CircleParticle {$/;"	c
org	surfaces/AbstractTile.as	/^class org.cove.flade.surfaces.AbstractTile  {$/;"	c
org	surfaces/CircleTile.as	/^class org.cove.flade.surfaces.CircleTile extends AbstractTile implements Surface{$/;"	c
org	surfaces/LineSurface.as	/^class org.cove.flade.surfaces.LineSurface extends AbstractTile implements Surface {$/;"	c
org	surfaces/RectangleTile.as	/^class org.cove.flade.surfaces.RectangleTile extends AbstractTile implements Surface {$/;"	c
org	util/Line.as	/^class org.cove.flade.util.Line {$/;"	c
org	util/Vector.as	/^class org.cove.flade.util.Vector {$/;"	c
ox	primitives/RimParticle.as	/^		var ox:Number = prev.x;$/;"	v
oy	primitives/RimParticle.as	/^		var oy:Number = prev.y;$/;"	v
p0	composites/SpringBox.as	/^	public var p0:RectangleParticle;$/;"	v
p1	composites/SpringBox.as	/^	public var p1:RectangleParticle;$/;"	v
p1	constraints/SpringConstraint.as	/^	private var p1:Particle;$/;"	v
p1	surfaces/LineSurface.as	/^	private var p1:Vector;$/;"	v
p1	util/Line.as	/^	public var p1:Vector;$/;"	v
p2	composites/SpringBox.as	/^	public var p2:RectangleParticle;$/;"	v
p2	constraints/SpringConstraint.as	/^	private var p2:Particle;$/;"	v
p2	surfaces/LineSurface.as	/^	private var p2:Vector;$/;"	v
p2	util/Line.as	/^	public var p2:Vector;$/;"	v
p3	composites/SpringBox.as	/^	public var p3:RectangleParticle;$/;"	v
p3	surfaces/LineSurface.as	/^	private var p3:Vector;$/;"	v
p3x	surfaces/LineSurface.as	/^		var p3x:Number = p2.x + -faceNormal.x * collisionDepth;$/;"	v
p3y	surfaces/LineSurface.as	/^		var p3y:Number = p2.y + -faceNormal.y * collisionDepth;$/;"	v
p4	surfaces/LineSurface.as	/^	private var p4:Vector;$/;"	v
p4x	surfaces/LineSurface.as	/^		var p4x:Number = p1.x + -faceNormal.x * collisionDepth;$/;"	v
p4y	surfaces/LineSurface.as	/^		var p4y:Number = p1.y + -faceNormal.y * collisionDepth;$/;"	v
pA	constraints/AngularConstraint.as	/^	private var pA:Vector;$/;"	v
pB	constraints/AngularConstraint.as	/^	private var pB:Vector;$/;"	v
pC	constraints/AngularConstraint.as	/^	private var pC:Vector;$/;"	v
pD	constraints/AngularConstraint.as	/^	private var pD:Vector$/;"	v
paTheta	constraints/AngularConstraint.as	/^		var paTheta:Number = thetaABD + halfTheta * stiffness;$/;"	v
paint	constraints/AngularConstraint.as	/^	public function paint():Void {	$/;"	f
paint	constraints/Constraint.as	/^	public function paint():Void;$/;"	f
paint	constraints/SpringConstraint.as	/^	public function paint():Void {$/;"	f
paint	primitives/CircleParticle.as	/^	public function paint():Void {$/;"	f
paint	primitives/Particle.as	/^	public function paint():Void {$/;"	f
paint	primitives/RectangleParticle.as	/^	public function paint():Void {$/;"	f
paint	primitives/Wheel.as	/^	public function paint():Void {$/;"	f
paint	surfaces/CircleTile.as	/^	public function paint():Void {$/;"	f
paint	surfaces/LineSurface.as	/^	public function paint():Void {	$/;"	f
paint	surfaces/RectangleTile.as	/^	public function paint():Void {$/;"	f
paint	surfaces/Surface.as	/^	public function paint():Void$/;"	f
paintCircle	graphics/Graphics.as	/^	public static function paintCircle (dmc:MovieClip, x:Number, y:Number, r:Number):Void {$/;"	f
paintConstraints	DynamicsEngine.as	/^	public function paintConstraints():Void {$/;"	f
paintLine	graphics/Graphics.as	/^	public static function paintLine ($/;"	f
paintPrimitives	DynamicsEngine.as	/^	public function paintPrimitives():Void {$/;"	f
paintRectangle	graphics/Graphics.as	/^	public static function paintRectangle($/;"	f
paintSurfaces	DynamicsEngine.as	/^	public function paintSurfaces():Void {$/;"	f
pcTheta	constraints/AngularConstraint.as	/^		var pcTheta:Number = thetaCBD - halfTheta * stiffness;$/;"	v
pen	surfaces/CircleTile.as	/^			var pen:Number = radius - mag;$/;"	v
pen	surfaces/CircleTile.as	/^		var pen:Number = (p.radius + radius) - len;$/;"	v
pen	surfaces/RectangleTile.as	/^			var pen:Number = p.radius - mag;$/;"	v
perpMomentum	primitives/Particle.as	/^		var perpMomentum:Vector = velProjection.multNew(sysObj.coeffFric);$/;"	v
pin	primitives/Particle.as	/^	public function pin():Void {$/;"	f
plus	util/Vector.as	/^	public function plus(v:Vector):Vector {$/;"	f
plusNew	util/Vector.as	/^	public function plusNew(v:Vector):Vector {$/;"	f
precalculate	surfaces/LineSurface.as	/^	private function precalculate():Void {$/;"	f
prev	primitives/Particle.as	/^	public var prev:Vector;$/;"	v
prev	primitives/RimParticle.as	/^	public var prev:Vector;$/;"	v
primitives	DynamicsEngine.as	/^	public var primitives:Array;$/;"	v
proj	util/Vector.as	/^		var proj:Vector = new Vector(0,0);$/;"	v
project	util/Vector.as	/^	public function project(b:Vector):Vector {$/;"	f
projectedCenter	primitives/Particle.as	/^		var projectedCenter:Number = curr.dot(axis);$/;"	v
projectedRadius	primitives/Particle.as	/^		var projectedRadius:Number = extents.dot(absAxis);$/;"	v
px	primitives/RimParticle.as	/^		var px:Number = prev.x = curr.x;		$/;"	v
px	primitives/Wheel.as	/^			var px:Number = curr.x;$/;"	v
py	primitives/RimParticle.as	/^		var py:Number = prev.y = curr.y;		$/;"	v
py	primitives/Wheel.as	/^			var py:Number = curr.y;$/;"	v
r	surfaces/AbstractTile.as	/^		var r:Number = center.x + rw\/2;$/;"	v
radius	primitives/CircleParticle.as	/^	public var radius:Number;$/;"	v
radius	surfaces/CircleTile.as	/^	private var radius:Number;$/;"	v
rectHeight	surfaces/RectangleTile.as	/^	private var rectHeight:Number;$/;"	v
rectWidth	surfaces/RectangleTile.as	/^	private var rectWidth:Number;$/;"	v
resolve	constraints/AngularConstraint.as	/^	public function resolve():Void {$/;"	f
resolve	constraints/Constraint.as	/^	public function resolve():Void;$/;"	f
resolve	constraints/SpringConstraint.as	/^	public function resolve():Void {$/;"	f
resolve	primitives/Wheel.as	/^	private function resolve(n:Vector):Void {$/;"	f
resolveCircleCollision	surfaces/CircleTile.as	/^	public function resolveCircleCollision(p:CircleParticle, sysObj:DynamicsEngine):Void {$/;"	f
resolveCircleCollision	surfaces/LineSurface.as	/^	public function resolveCircleCollision(p:CircleParticle, sysObj:DynamicsEngine):Void {$/;"	f
resolveCircleCollision	surfaces/RectangleTile.as	/^	public function resolveCircleCollision(p:CircleParticle, sysObj:DynamicsEngine):Void {$/;"	f
resolveCircleCollision	surfaces/Surface.as	/^	public function resolveCircleCollision(p:CircleParticle, sysObj:DynamicsEngine):Void$/;"	f
resolveCollision	primitives/Particle.as	/^	public function resolveCollision(normal:Vector, sysObj:DynamicsEngine):Void {$/;"	f
resolveCollision	primitives/Wheel.as	/^	public function resolveCollision(normal:Vector, sysObj:DynamicsEngine):Void {$/;"	f
resolveRectangleCollision	surfaces/CircleTile.as	/^	public function resolveRectangleCollision(p:RectangleParticle, sysObj:DynamicsEngine):Void {$/;"	f
resolveRectangleCollision	surfaces/LineSurface.as	/^	public function resolveRectangleCollision(p:RectangleParticle, sysObj:DynamicsEngine):Void {$/;"	f
resolveRectangleCollision	surfaces/RectangleTile.as	/^	public function resolveRectangleCollision(p:RectangleParticle, sysObj:DynamicsEngine):Void {$/;"	f
resolveRectangleCollision	surfaces/Surface.as	/^	public function resolveRectangleCollision(p:RectangleParticle, sysObj:DynamicsEngine):Void$/;"	f
restLength	constraints/SpringConstraint.as	/^	private var restLength:Number;$/;"	v
rise	surfaces/LineSurface.as	/^	private var rise:Number;$/;"	v
rp	primitives/Wheel.as	/^	public var rp:RimParticle;$/;"	v
run	surfaces/LineSurface.as	/^	private var run:Number;$/;"	v
rx	primitives/Wheel.as	/^			var rx:Number = rp.curr.x;$/;"	v
rx	primitives/Wheel.as	/^		var rx:Number = -rp.curr.y;$/;"	v
ry	primitives/Wheel.as	/^			var ry:Number = rp.curr.y;$/;"	v
ry	primitives/Wheel.as	/^		var ry:Number = rp.curr.x;$/;"	v
s	DynamicsEngine.as	/^			var s:Surface = surfaces[j];$/;"	v
sDotV	primitives/Particle.as	/^		var sDotV:Number = normal.dot(vel);$/;"	v
satisfyConstraints	DynamicsEngine.as	/^	private function satisfyConstraints():Void {$/;"	f
segmentInequality	surfaces/LineSurface.as	/^	private function segmentInequality(toPoint:Vector):Boolean {$/;"	f
setActiveState	surfaces/AbstractTile.as	/^	public function setActiveState(a:Boolean):Void {$/;"	f
setActiveState	surfaces/Surface.as	/^	public function setActiveState(s:Boolean):Void$/;"	f
setAxisProjections	surfaces/LineSurface.as	/^	private function setAxisProjections():Void {$/;"	f
setCardProjections	surfaces/AbstractTile.as	/^	public function setCardProjections():Void {$/;"	f
setCollisionDepth	surfaces/LineSurface.as	/^	public function setCollisionDepth(d:Number) {$/;"	f
setDamping	DynamicsEngine.as	/^	public function setDamping(d:Number):Void {$/;"	f
setGravity	DynamicsEngine.as	/^	public function setGravity(gx:Number, gy:Number):Void {$/;"	f
setMTD	primitives/Particle.as	/^	public function setMTD(depthX:Number, depthY:Number, depthN:Number, surfNormal:Vector):Void {$/;"	f
setPos	primitives/Particle.as	/^	public function setPos(px:Number, py:Number):Void {$/;"	f
setRestLength	constraints/SpringConstraint.as	/^	public function setRestLength(r:Number):Void {$/;"	f
setStiffness	constraints/AngularConstraint.as	/^	public function setStiffness(s:Number):Void {$/;"	f
setStiffness	constraints/SpringConstraint.as	/^	public function setStiffness(s:Number):Void {$/;"	f
setSurfaceBounce	DynamicsEngine.as	/^	public function setSurfaceBounce(kfr:Number):Void {$/;"	f
setSurfaceFriction	DynamicsEngine.as	/^	public function setSurfaceFriction(f:Number):Void {$/;"	f
setTo	util/Vector.as	/^	public function setTo(px:Number, py:Number):Void {$/;"	f
setTraction	primitives/Wheel.as	/^	public function setTraction(t:Number):Void {$/;"	f
setVisible	constraints/SpringConstraint.as	/^	public function setVisible(v:Boolean):Void {$/;"	f
setVisible	primitives/Particle.as	/^	public function setVisible(v:Boolean):Void {$/;"	f
setVisible	surfaces/AbstractTile.as	/^	public function setVisible(v:Boolean):Void {$/;"	f
setXYMTD	primitives/Particle.as	/^	public function setXYMTD(depthX:Number, depthY:Number):Void {$/;"	f
sideNormal	surfaces/LineSurface.as	/^	private var sideNormal:Vector;$/;"	v
sign	surfaces/CircleTile.as	/^	private function sign(val:Number):Number {$/;"	f
sign	surfaces/LineSurface.as	/^	private var sign:Number;$/;"	v
sign	surfaces/RectangleTile.as	/^	private function sign(val:Number):Number {$/;"	f
slope	surfaces/LineSurface.as	/^	private var slope:Number;$/;"	v
speed	primitives/RimParticle.as	/^	public var speed:Number;$/;"	v
stiffness	constraints/AngularConstraint.as	/^	private var stiffness:Number;$/;"	v
stiffness	constraints/SpringConstraint.as	/^	private var stiffness:Number;$/;"	v
surfaces	DynamicsEngine.as	/^	public var surfaces:Array;$/;"	v
sx	primitives/Wheel.as	/^		var sx:Number = rx * rp.speed;$/;"	v
sy	primitives/Wheel.as	/^		var sy:Number = ry * rp.speed;$/;"	v
t	surfaces/AbstractTile.as	/^		var t:Number = center.y - rh\/2;$/;"	v
targetTheta	constraints/AngularConstraint.as	/^	public var targetTheta:Number;$/;"	v
tearLength	constraints/SpringConstraint.as	/^	private var tearLength:Number;$/;"	v
temp	primitives/Particle.as	/^	private var temp:Vector;$/;"	v
temp	surfaces/LineSurface.as	/^		var temp:Number;$/;"	v
testIntervals	surfaces/AbstractTile.as	/^	public function testIntervals($/;"	f
thetaABC	constraints/AngularConstraint.as	/^		var thetaABC:Number = calcTheta(pA, pB, pC);$/;"	v
thetaABD	constraints/AngularConstraint.as	/^		var thetaABD:Number = calcTheta(pA, pB, pD);$/;"	v
thetaCBD	constraints/AngularConstraint.as	/^		var thetaCBD:Number = calcTheta(pC, pB, pD);$/;"	v
timeStep	DynamicsEngine.as	/^	public function timeStep():Void {$/;"	f
totalMomentum	primitives/Particle.as	/^		var totalMomentum:Vector = normMomentum.plusNew(perpMomentum);$/;"	v
tx	primitives/Wheel.as	/^		var tx:Number = curr.x - prev.x;$/;"	v
ty	primitives/Wheel.as	/^		var ty:Number = curr.y - prev.y;$/;"	v
u	surfaces/LineSurface.as	/^		var u:Number = findU(toPoint);$/;"	v
vel	primitives/Particle.as	/^		var vel:Vector = curr.minusNew(prev);$/;"	v
velProjection	primitives/Particle.as	/^		var velProjection:Vector = vel.minusNew(normal.multNew(sDotV));$/;"	v
verlet	DynamicsEngine.as	/^	private function verlet():Void {$/;"	f
verlet	primitives/Particle.as	/^	public function verlet(sysObj:DynamicsEngine):Void {$/;"	f
verlet	primitives/RimParticle.as	/^	public function verlet(sysObj:DynamicsEngine):Void {$/;"	f
verlet	primitives/Wheel.as	/^	public function verlet(sysObj:DynamicsEngine):Void {$/;"	f
vertex	primitives/RectangleParticle.as	/^	public var vertex:Vector;$/;"	v
verts	surfaces/AbstractTile.as	/^	private var verts:Array;$/;"	v
vs	primitives/RimParticle.as	/^	public var vs:Number;$/;"	v
vx	primitives/Wheel.as	/^		var vx:Number = tx + sx;$/;"	v
vx	surfaces/CircleTile.as	/^			var vx:Number = p.curr.x + sign(center.x - p.curr.x) * (p.width \/ 2);$/;"	v
vx	surfaces/RectangleTile.as	/^			var vx:Number = center.x + sign(p.curr.x - center.x) * (rectWidth \/ 2);$/;"	v
vy	primitives/Wheel.as	/^		var vy:Number = ty + sy;$/;"	v
vy	surfaces/CircleTile.as	/^			var vy:Number = p.curr.y + sign(center.y - p.curr.y) * (p.height \/ 2);$/;"	v
vy	surfaces/RectangleTile.as	/^			var vy:Number = center.y + sign(p.curr.y - center.y) * (rectHeight \/ 2);$/;"	v
w0	primitives/Wheel.as	/^		var w0:Number = 1 - coeffSlip;$/;"	v
w2	graphics/Graphics.as	/^		var w2:Number = w\/2;$/;"	v
width	primitives/RectangleParticle.as	/^	public var width:Number;$/;"	v
wr	primitives/RimParticle.as	/^	private var wr:Number;$/;"	v
x	surfaces/LineSurface.as	/^		var x:Number = p1.x + u * (p2.x - p1.x);$/;"	v
x	util/Vector.as	/^	public var x:Number;$/;"	v
y	surfaces/LineSurface.as	/^		var y:Number = p1.y + u * (p2.y - p1.y);$/;"	v
y	util/Vector.as	/^	public var y:Number;$/;"	v
